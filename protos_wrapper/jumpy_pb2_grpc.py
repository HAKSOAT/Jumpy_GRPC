# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import protos_wrapper.jumpy_pb2 as jumpy__pb2


class JumiaStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetProduct = channel.unary_unary(
                '/Jumia/GetProduct',
                request_serializer=jumpy__pb2.ProductRequest.SerializeToString,
                response_deserializer=jumpy__pb2.ProductResponse.FromString,
                )
        self.GetProducts = channel.unary_stream(
                '/Jumia/GetProducts',
                request_serializer=jumpy__pb2.ProductRequest.SerializeToString,
                response_deserializer=jumpy__pb2.ProductResponse.FromString,
                )
        self.GetCheapestProduct_Stream = channel.stream_unary(
                '/Jumia/GetCheapestProduct_Stream',
                request_serializer=jumpy__pb2.ProductRequest.SerializeToString,
                response_deserializer=jumpy__pb2.ProductResponse.FromString,
                )
        self.GetCheapestProduct_Message = channel.stream_stream(
                '/Jumia/GetCheapestProduct_Message',
                request_serializer=jumpy__pb2.ProductRequest.SerializeToString,
                response_deserializer=jumpy__pb2.ProductResponse.FromString,
                )


class JumiaServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetProduct(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProducts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCheapestProduct_Stream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCheapestProduct_Message(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_JumiaServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetProduct': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProduct,
                    request_deserializer=jumpy__pb2.ProductRequest.FromString,
                    response_serializer=jumpy__pb2.ProductResponse.SerializeToString,
            ),
            'GetProducts': grpc.unary_stream_rpc_method_handler(
                    servicer.GetProducts,
                    request_deserializer=jumpy__pb2.ProductRequest.FromString,
                    response_serializer=jumpy__pb2.ProductResponse.SerializeToString,
            ),
            'GetCheapestProduct_Stream': grpc.stream_unary_rpc_method_handler(
                    servicer.GetCheapestProduct_Stream,
                    request_deserializer=jumpy__pb2.ProductRequest.FromString,
                    response_serializer=jumpy__pb2.ProductResponse.SerializeToString,
            ),
            'GetCheapestProduct_Message': grpc.stream_stream_rpc_method_handler(
                    servicer.GetCheapestProduct_Message,
                    request_deserializer=jumpy__pb2.ProductRequest.FromString,
                    response_serializer=jumpy__pb2.ProductResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Jumia', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Jumia(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetProduct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Jumia/GetProduct',
            jumpy__pb2.ProductRequest.SerializeToString,
            jumpy__pb2.ProductResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetProducts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Jumia/GetProducts',
            jumpy__pb2.ProductRequest.SerializeToString,
            jumpy__pb2.ProductResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCheapestProduct_Stream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/Jumia/GetCheapestProduct_Stream',
            jumpy__pb2.ProductRequest.SerializeToString,
            jumpy__pb2.ProductResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCheapestProduct_Message(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/Jumia/GetCheapestProduct_Message',
            jumpy__pb2.ProductRequest.SerializeToString,
            jumpy__pb2.ProductResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
